imqbrokerd -name myBroker -port 1234
imqadmin


Группы тегов JSTL (JavaServer Pages Standard Tag Library) включают:

Core Tags (теги ядра)
Formatting Tags (теги форматирования)
SQL Tags (теги для работы с SQL)
XML Tags (теги для работы с XML)
Functions Tags (теги функций)
Группа тегов core (теги ядра) включает в себя основные функциональные теги JSTL, такие как условные 
операторы (<c:if>, <c:choose>, <c:when>, <c:otherwise>), циклы (<c:forEach>), управление потоком 
(<c:redirect>, <c:url>, <c:import>) и другие.

Класс пользовательского тега должен реализовывать интерфейс javax.servlet.jsp.tagext.Tag. Этот класс 
должен быть упакован в JAR-файл и иметь файл дескриптора (TLD). Кроме того, класс должен предоставлять 
методы для установки и получения атрибутов тега.

Дескрипторный файл библиотеки тегов (TLD) - это файл XML, который содержит информацию о пользовательских 
тегах, их атрибутах, телах и классах обработчиков. Он используется для описания пользовательских тегов 
и их атрибутов, что позволяет контейнеру JSP понимать и обрабатывать эти теги.

Для регистрации библиотеки пользовательских тегов в JSP-странице следует использовать директиву taglib. Например:

jsp
Copy code
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
Здесь "uri" - это URI библиотеки тегов, а "prefix" - это префикс, который будет использоваться для 
обращения к тегам из этой библиотеки в JSP-странице.

Тег с телом определяется с помощью тега <c:choose> в JSTL. Внутри тега <c:choose> могут использоваться 
другие теги, такие как <c:when> и <c:otherwise>, для определения различных вариантов содержимого тела.

Функции-теги (tag functions) представляют собой небольшие программные блоки, которые можно вызывать в 
JSP-страницах для выполнения конкретных операций. Они могут использоваться для обработки строк, форматирования 
дат, выполнения математических операций и других подобных задач. Функции-теги в JSTL представлены тегами <fn:...>, 
где ... - это название функции. Например, <fn:length> используется для определения длины строки.


Репозиторий - это паттерн проектирования, который используется для управления доступом к данным. 
Он обеспечивает единый интерфейс для доступа к данным, независимо от того, какие источники данных 
используются (например, база данных, файловая система, внешние API и т. д.). 
Функции репозитория включают:
Изоляция бизнес-логики от деталей доступа к данным.
Предоставление единого интерфейса для работы с данными.
Облегчение тестирования путем предоставления заглушек (mock objects) для работы с данными.


Слой сервисов (Service Layer) - это слой в архитектуре приложения, который 
содержит бизнес-логику и обработку запросов. Назначение слоя сервисов включает:
Изоляцию бизнес-логики от слоя представления (например, от JSP или других уровней пользовательского интерфейса).
Предоставление единых интерфейсов для выполнения операций и обработки запросов от клиентов или других частей системы.
Обеспечение того, чтобы бизнес-логика была чистой и не зависела от конкретных технологий или реализаций других слоев.


Front Controller - это паттерн проектирования, который представляет собой централизованный 
механизм обработки запросов в веб-приложениях. Основная идея заключается в том, чтобы иметь 
единую точку входа для всех запросов и централизованно управлять обработкой запросов, включая 
маршрутизацию, аутентификацию, авторизацию и обработку исключений. Front Controller принимает 
запросы от клиента, определяет, какой контроллер должен обрабатывать запрос, и направляет 
запрос этому контроллеру.

Взаимодействие JSP-Servlet-JSP:

Клиент (например, браузер) отправляет HTTP-запрос на сервер.
Servlet-контейнер (например, Apache Tomcat) получает запрос и перенаправляет его к 
соответствующему сервлету на основе маппинга URL.
Сервлет обрабатывает запрос, выполняя необходимую бизнес-логику, и подготавливает данные для отображения.
Сервлет передает управление на JSP-страницу, передавая данные через объект запроса, объект сессии или атрибуты контекста.
JSP-страница отображает данные, используя теги и скрипты Java, и генерирует HTML-код, 
который возвращается обратно клиенту в виде HTTP-ответа.
Клиент получает HTTP-ответ и отображает полученную HTML-страницу в браузере.


1. Что такое MOM, JMS?
MOM (Message Oriented Middleware) - это среда, которая обеспечивает обмен сообщениями между 
приложениями в распределенной среде. 
JMS (Java Message Service) - это стандартный API для обмена 
сообщениями между Java-приложениями, работающими в MOM.

2. Поясните принцип работы MOM. Варианты архитектуры.
Принцип работы MOM основан на асинхронной передаче сообщений между отправителем и получателем 
через посредника (брокера). Приложения отправляют сообщения брокеру, а получатели подписываются 
на получение сообщений из определенных очередей или топиков. МОМ может быть реализована по 
различным архитектурам, таким как point-to-point (P2P) и publish/subscribe (pub/sub).

3. Объясните принцип работы режима point-to-point (P2P).
В режиме point-to-point (P2P) каждое сообщение доставляется только одному получателю. 
Отправитель отправляет сообщение в очередь, и брокер гарантирует, что оно будет 
доставлено только одному получателю, который получит его из этой очереди.

4. Объясните принцип работы publish/subscribe (pub/sub).
В режиме publish/subscribe (pub/sub) отправитель отправляет сообщение в топик (тему), 
а затем все подписчики, которые подписаны на эту тему, получают копию сообщения. 
Таким образом, сообщение доставляется всем активным подписчикам темы.

5. Поясните запуск и настройку брокеров в Open MQ.
Для запуска и настройки брокеров Open MQ, вы обычно должны установить и сконфигурировать 
Open MQ сервер на вашем сервере. После этого вы можете использовать административные 
инструменты (например, командную строку или графический интерфейс) для создания и 
управления очередями и темами.

6. Что такое администрируемые объекты в MOM?
объекты, которые конфигурируются
административно, а не программно
► Нужно настроить эти объекты и
сделать их доступными в
пространстве имен JNDI
Типы объектов:
► фабрики соединений — используются
клиентами для создания подключения к пункту
назначения;
► места назначения — точки
распространения сообщений, которые получают,
хранят и распространяют сообщения; (P2P) (pubsub)

7. Перечислите классы и интерфейсы JMS API.
► JMSContext - объекты JMS соединения и сессии. Нужно
соединение с MOM, обмен идет в сессии
► ConnectionFactory - объект, который создает объекты
Connection инкапсулированные в JMSContext
► Queue и Topic - получатели: интерфейсы наследуются от
Destination.
► JMSProducer интерфейс с методом для посылки сообщения
получателю
► JMSConsumer интерфейс с методом для получения сообщения
► Message - интерфейс для всех сообщений. Содержит
заголовок и тело

8. Охарактеризуйте администрируемые объекты JMS.
Администрируемые объекты JMS предоставляют интерфейс для управления аспектами MOM, 
такими как создание, настройка и удаление очередей и тем. Они включают в себя объекты, 
такие как очереди, темы, соединения, сеансы и т. д.

9. Структура сообщения JMS.
Структура сообщения JMS включает заголовок, свойства и тело. Заголовок содержит метаданные 
о сообщении, свойства представляют пользовательские данные, а тело содержит само сообщение.

10.Типы сообщений JMS.
►TextMessage - объект с Java String
►ObjectMessage - сериализуемые Java объекты
►BytesMessage - массив байт
►StreamMessage - поток Java примитивов
►MapMessage - key/value пары

11.В чем разница при получении сообщений синхронно и асинхронно?
При получении сообщений синхронно поток блокируется до получения сообщения, в то время 
как при асинхронном получении поток не блокируется и выполняется асинхронно с другими операциями.

12.Приведите алгоритм обмена сообщениями
Алгоритм обмена сообщениями зависит от режима работы (P2P или pub/sub), но в общем случае 
он включает отправку сообщения отправителем в брокер, а затем получение сообщения получателем из брокера.

13. В чем разница между долговременной и – не долговременной
подпиской при создании topic?
►Подписка
 Долговременная – гарантирует доставку, даже если
подписчики не активны
 Не долговременная – получают только активные
подписчики (сообщение удаляется после
подтверждения)
Долговременная подписка сохраняет сообщения в теме до тех пор, пока все активные подписчики 
не получат их, в то время как недолговременная подписка отправляет сообщение только 
активным подписчикам в момент отправки.


14.Перечислите и охарактеризуйте модели подтверждения доставки
сообщений.
►AUTO_ACKNOWLEDGE сеансах
 посылает подтверждение как только успешно
выполниться onMessage() (по умолчанию)
►CLIENT_ACKNOWLEDGE
 требует явного подтверждения - acknowledge() из
приемника
►DUP_OK_ACKNOWLEDGE
 Нарушена работа сервера. Сообщение может
доставляться несколько раз
какое-то транзационное

15.Что такое и как используются селекторы сообщений (фильтры)?
Селекторы сообщений (фильтры) позволяют выбирать только те сообщения, которые соответствуют 
определенным критериям, таким как значения свойств сообщения.

16.Что такое MDB?
MDB (Message-Driven Bean) - это компонент EJB, который используется для обработки 
сообщений JMS асинхронным образом. MDB реагирует на появление новых сообщений 
в очереди или топике и выполняет необходимую обработку.
► MDB — это асинхронный потребитель, который вызывается контейнером в
результате прихода сообщений (часть спецификации EJB, нуждаются в
полном стеке технологий Java EE). 
контейнер управляет многопоточностью,
безопасностью и операциями
