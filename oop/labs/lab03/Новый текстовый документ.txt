1. В C# для создания меню часто используются классы `MenuStrip`, `ToolStripMenuItem` и `ContextMenu`. 

   - `MenuStrip`: Представляет контейнер для объектов `ToolStripMenuItem` и предоставляет основной функционал для создания меню. Методы и свойства включают `Items` (коллекция элементов меню), `BackColor`, `ForeColor`, `Font` и многие другие для настройки внешнего вида и поведения меню.
   
   - `ToolStripMenuItem`: Представляет элемент меню, который может содержать подменю и выполнять определенные действия при выборе пользователем. Методы и свойства включают `Text`, `Image`, `ShortcutKeys`, `Click` (событие, которое возникает при выборе элемента) и другие.
   
   - `ContextMenu`: Представляет контекстное меню, которое может быть привязано к элементу управления и появляться при щелчке правой кнопкой мыши на этом элементе. Он работает аналогично `MenuStrip` и использует `ToolStripMenuItem` для определения пунктов меню.

2. Строка состояния в C# может содержать информацию о текущем состоянии приложения, например, о текущей операции, режиме работы или статусе подключения. Методы управления строкой состояния включают `StatusBarPanel.Text` для установки текста, `StatusBarPanel.Icon` для установки иконки, `StatusBarPanel.ToolTipText` для установки всплывающей подсказки и т.д.

3. Регулярные выражения (RegEx) - это последовательности символов, которые образуют шаблон поиска. Они используются для поиска и сопоставления строк определенному шаблону. Регулярные выражения могут быть использованы в различных языках программирования, включая C#, для поиска, замены и сопоставления строк.

4. Привязки (якоря) в регулярных выражениях используются для указания конкретной позиции в строке, где должно произойти сопоставление. Примеры:
   - `^` - начало строки
   - `$` - конец строки
   - `\b` - граница слова
   - `\B` - не граница слова

5. Группирование в регулярных выражениях используется для объединения частей выражения в одну группу и применения операций к этой группе в целом. Пример: `(abc)+` сопоставит один или несколько повторений подстроки "abc".

6. Кванторы (множители) в регулярных выражениях используются для определения количества повторений символов или групп. Примеры:
   - `*` - ноль или более раз
   - `+` - один или более раз
   - `?` - ноль или один раз
   - `{n}` - ровно n раз
   - `{n,}` - n или более раз
   - `{n,m}` - от n до m раз

7. Пример регулярного выражения для проверки номера MTC (Velcom): `^(375|80)(25|29|33|44)(\d{7})$`.

8. Пример регулярного выражения для проверки паспорта: `^\d{2}\s\d{2}\s\d{6}$`.

9. Пример регулярного выражения для проверки даты: `^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d\d$`.

10. Пример регулярного выражения для проверки УДК (Универсальной десятичной классификации): `^\d{3}\.\d{3}$`.

11. Пример регулярного выражения для проверки Фамилии: `^[А-ЯЁ][а-яё]*$`.

12. Пример регулярного выражения для проверки пароля, логина: `^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$`.

13. Разберем регулярное выражение `/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/`:
   - `^`: начало строки
   - `(https?:\/\/)?`: необязательная группа, которая сопоставляет "http://" или "https://"
   - `([\da-z\.-]+)`: сопоставляет поддомен (цифры, буквы, дефис, точка)
   - `\.`: точка
   - `([a-z\.]{2,6})`: сопоставляет доменное имя верхнего уровня (от 2 до 6 буквенных символов)
   - `([\/\w \.-]*)*`: сопоставляет путь после доменного имени (символы пути, пробелы, точки, дефисы)
   - `\/?`: необязательный символ "/", который может встречаться ноль или один раз
   - `$`: конец строки